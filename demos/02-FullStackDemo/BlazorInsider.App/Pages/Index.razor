@page "/"
@using BlazorInsider.App.Services
@using BlazorInsider.Shared.Model
@using Grpc.Net.Client;
@using Grpc.Core;

<h3>Add new order</h3>

<table>
    <tr>
        <td>Description:</td>
        <td><input type="text" @bind="description" /></td>
    </tr>
    <tr>
        <td>Quantity:</td>
        <td><input type="number" @bind="quantity" /></td>
    </tr>
    <tr>
        <td>Total:</td>
        <td><input type="number" @bind="total" /></td>
    </tr>
</table>

<p></p>

<table>
    <tr>
        <td><button class="btn btn-primary" @onclick="@SaveOrder">Save order</button></td>
        <td><button class="btn btn-primary" @onclick="@RefreshOrders">Refresh orders</button></td>
    </tr>
</table>

<p></p>
<h3>Orders</h3>
<p></p>

@if (orders == null)
{
    <p>Loading...</p>
}
else
{
    <table class="responsive-table">
        <thead>
            <tr>
                <th scope="col">Order id</th>
                <th scope="col">Description</th>
                <th scope="col">Quantity</th>
                <th scope="col">Total</th>
                <th scope="col">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in orders)
            {
                <tr>
                    <th scope="row">@order.OrderId</th>
                    <td data-title="Description">@order.Description</td>
                    <td data-title="Quantity">@order.Quantity</td>
                    <td data-title="Total">@order.Total</td>
                    <td data-title="Status">@order.Status</td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    int orderId;
    string description;
    int quantity;
    double total;
    List<Order> orders;

    async Task SaveOrder()
    {
        AppContext.SetSwitch(
                        "System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport",
                        true);

        var channel = new Channel("127.0.0.1:8194", ChannelCredentials.Insecure);
        var client = new OrdersManager.OrdersManagerClient(channel);
        var request = new AddOrderRequest()
        {
            Description = description,
            OrderID = orderId,
            Quantity = quantity,
            Total = total,
            Status = "Pending"
        };

        var reply = await client.AddOrderAsync(request);

        await channel.ShutdownAsync();

        RefreshOrders();

        // init Input fields
        description = string.Empty;
        quantity = 0;
        total = 0;
    }

    void RefreshOrders()
    {
        AppContext.SetSwitch(
                        "System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport",
                        true);

        var channel = new Channel("127.0.0.1:8194", ChannelCredentials.Insecure);
        var client = new OrdersManager.OrdersManagerClient(channel);
        var request = new GetOrdersRequest();
        var reply = client.GetOrders(request);

        // map objects to result
        var ordersToDisplay = new List<Order>();
        foreach (var item in reply.GetOrderModels)
        {
            var orderModel = new Order()
            {
                OrderId = item.OrderID,
                Description = item.Description,
                Quantity = item.Quantity,
                Status = item.Status,
                Total = item.Total
            };
            ordersToDisplay.Add(orderModel);
        }

        orders = ordersToDisplay;
    }

    protected override void OnInit()
    {
        RefreshOrders();
    }
}